import { useState } from "react"
import { useTranslation } from "react-i18next"
import { motion } from "framer-motion"
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { CerberusSidebar } from "@/components/CerberusSidebar"
import { StarfieldBackground } from "@/components/StarfieldBackground"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { useCerberusStore } from "@/store/cerberus-store"
import { Zap, Search, Target, AlertTriangle, Shield, Database, Play, Download } from "lucide-react"

const Exploits = () => {
  const { t } = useTranslation()
  const { addLog } = useCerberusStore()
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("todos")

  const exploitCategories = [
    { name: "Todos", count: 847, icon: Database, id: "todos" },
    { name: "Web", count: 312, icon: Target, id: "web" },
    { name: "Rede", count: 245, icon: Shield, id: "rede" },
    { name: "Sistema", count: 203, icon: AlertTriangle, id: "sistema" }
  ]

  const featuredExploits = [
    {
      id: "EXP-2024-001",
      name: "Apache Struts RCE",
      severity: "Critical",
      cve: "CVE-2024-001",
      target: "Apache Struts 2.x",
      description: "Remote code execution via OGNL injection",
      status: "verified"
    },
    {
      id: "EXP-2024-002", 
      name: "Windows SMB Buffer Overflow",
      severity: "High",
      cve: "CVE-2024-002",
      target: "Windows Server 2019/2022",
      description: "Buffer overflow in SMB protocol implementation",
      status: "poc"
    },
    {
      id: "EXP-2024-003",
      name: "MySQL Authentication Bypass",
      severity: "Medium",
      cve: "CVE-2024-003", 
      target: "MySQL 8.0.x",
      description: "Authentication bypass via malformed packets",
      status: "verified"
    }
  ]

  const recentActivity = [
    { action: "Exploit launched", target: "192.168.1.50:8080", exploit: "Struts RCE", time: "5m ago" },
    { action: "Payload deployed", target: "10.0.0.25:445", exploit: "SMB Overflow", time: "12m ago" },
    { action: "Shell obtained", target: "company.com:3306", exploit: "MySQL Bypass", time: "1h ago" }
  ]

  const executeExploit = (exploit: any) => {
    addLog({
      level: 'info',
      source: 'Exploits',
      message: `Iniciando exploit: ${exploit.name} contra alvo`
    })
    // Simulate exploit execution
    setTimeout(() => {
      const success = Math.random() > 0.3
      addLog({
        level: success ? 'success' : 'warning',
        source: 'Exploits',
        message: success 
          ? `Exploit ${exploit.name} executado com sucesso! Shell obtido.`
          : `Exploit ${exploit.name} falhou. Alvo pode estar patchado.`
      })
    }, 2000)
  }

  const downloadExploit = (exploit: any) => {
    addLog({
      level: 'info',
      source: 'Exploits', 
      message: `Baixando exploit: ${exploit.name}`
    })
    
    setTimeout(() => {
      addLog({
        level: 'success',
        source: 'Exploits',
        message: `Exploit ${exploit.name} baixado com sucesso`
      })
    }, 1000)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-900/50 text-red-400 border-red-800'
      case 'High': return 'bg-orange-900/50 text-orange-400 border-orange-800'
      case 'Medium': return 'bg-yellow-900/50 text-yellow-400 border-yellow-800'
      default: return 'bg-gray-900/50 text-gray-400 border-gray-800'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'verified': return 'bg-green-900/50 text-green-400 border-green-800'
      case 'poc': return 'bg-blue-900/50 text-blue-400 border-blue-800'
      default: return 'bg-gray-900/50 text-gray-400 border-gray-800'
    }
  }

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen bg-background relative"
    >
      <StarfieldBackground />
      <SidebarProvider>
        <div className="flex w-full min-h-screen">
          <CerberusSidebar />
          
          <div className="flex-1 flex flex-col relative z-10">
            <header className="h-16 border-b border-foreground/10 bg-background/80 backdrop-blur-xl flex items-center px-6">
              <SidebarTrigger className="mr-4" />
              <div className="flex items-center space-x-4">
                <Zap className="h-6 w-6 text-primary" />
                <h1 className="text-xl font-bold text-primary">{t('exploits.title')}</h1>
              </div>
            </header>

            <main className="flex-1 p-6 space-y-6">
              {/* Search */}
              <Card className="bg-glass-gradient backdrop-blur-glass border border-glass-border">
                <CardContent className="pt-6">
                  <div className="flex space-x-4">
                    <div className="relative flex-1">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                      <Input
                        placeholder={t('exploits.search')}
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10 bg-terminal-bg border-glass-border text-primary"
                      />
                    </div>
                    <Button 
                      className="bg-primary text-primary-foreground hover:bg-primary/90"
                      onClick={() => {
                        if (!searchTerm.trim()) {
                          addLog({
                            level: 'warning',
                            source: 'Exploits',
                            message: 'Digite um termo de busca'
                          })
                          return
                        }
                        addLog({
                          level: 'info',
                          source: 'Exploits',
                          message: `Buscando exploits para: ${searchTerm}`
                        })
                        setTimeout(() => {
                          const numResults = Math.floor(Math.random() * 20) + 5
                          addLog({
                            level: 'success',
                            source: 'Exploits',
                            message: `Busca concluída: ${numResults} exploits encontrados para "${searchTerm}"`
                          })
                        }, 1500)
                      }}
                    >
                      Buscar Exploits
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Categories */}
              <Card className="bg-glass-gradient backdrop-blur-glass border border-glass-border">
                <CardHeader>
                  <CardTitle className="text-primary">Exploit Categories</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {exploitCategories.map((category) => (
                      <div 
                        key={category.name} 
                        className="p-4 bg-glass-gradient border border-glass-border rounded-lg hover:border-primary/30 transition-all duration-300 cursor-pointer"
                        onClick={() => {
                          setSelectedCategory(category.id)
                          addLog({
                            level: 'info',
                            source: 'Exploits',
                            message: `Categoria selecionada: ${category.name} (${category.count} exploits disponíveis)`
                          })
                        }}
                      >
                        <div className="flex items-center space-x-3 mb-2">
                          <category.icon className="h-5 w-5 text-primary" />
                          <span className="font-semibold text-foreground">{category.name}</span>
                        </div>
                        <p className="text-2xl font-bold text-primary">{category.count}</p>
                        <p className="text-sm text-muted-foreground">exploits disponíveis</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Featured Exploits */}
              <Card className="bg-glass-gradient backdrop-blur-glass border border-glass-border">
                <CardHeader>
                  <CardTitle className="text-primary">Featured Exploits</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {featuredExploits.map((exploit) => (
                      <div key={exploit.id} className="p-4 bg-glass-gradient border border-glass-border rounded-lg hover:border-primary/30 transition-all duration-300">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <span className="text-sm font-mono text-muted-foreground">{exploit.id}</span>
                            <Badge className={getSeverityColor(exploit.severity)}>
                              {exploit.severity}
                            </Badge>
                            <Badge className={getStatusColor(exploit.status)}>
                              {exploit.status}
                            </Badge>
                          </div>
                          <div className="flex space-x-2">
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="border-glass-border hover:border-primary/30"
                              onClick={() => executeExploit(exploit)}
                            >
                              <Play className="h-3 w-3 mr-1" />
                              {t('exploits.execute')}
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="border-glass-border hover:border-primary/30"
                              onClick={() => downloadExploit(exploit)}
                            >
                              <Download className="h-3 w-3 mr-1" />
                              {t('exploits.download')}
                            </Button>
                          </div>
                        </div>
                        
                        <h3 className="text-lg font-semibold text-foreground mb-2">{exploit.name}</h3>
                        <p className="text-sm text-muted-foreground mb-2">{exploit.description}</p>
                        
                        <div className="flex items-center justify-between text-sm">
                          <div className="space-x-4">
                            <span className="text-muted-foreground">CVE: <span className="font-mono text-foreground">{exploit.cve}</span></span>
                            <span className="text-muted-foreground">Target: <span className="text-foreground">{exploit.target}</span></span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Recent Activity */}
              <Card className="bg-glass-gradient backdrop-blur-glass border border-glass-border">
                <CardHeader>
                  <CardTitle className="text-primary">Recent Activity</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {recentActivity.map((activity, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-glass-gradient border border-glass-border rounded-lg">
                        <div className="flex items-center space-x-4">
                          <div className="w-2 h-2 bg-primary rounded-full animate-pulse-subtle"></div>
                          <div>
                            <p className="font-semibold text-foreground">{activity.action}</p>
                            <p className="text-sm text-muted-foreground">{activity.exploit} → {activity.target}</p>
                          </div>
                        </div>
                        <span className="text-sm text-muted-foreground">{activity.time}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </main>
          </div>
        </div>
      </SidebarProvider>
    </motion.div>
  )
}

export default Exploits